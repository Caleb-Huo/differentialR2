thisResult <- data.frame(genes = rownames(BA11),
amp =NA, phase = NA, peakTime = NA, basal = NA, R2 = NA, pvalue = NA
)
thisResult
head(thisResult)
BA11[1,]
class(BA11[1,])
aLR <- LR_rhythmicity(tt, yy)
yy <- data_group[gg, ]
aLR <- LR_rhythmicity(tt, yy)
gg <- 1
yy <- data_group[gg, ]
aLR <- LR_rhythmicity(tt, yy)
yy <- BA11[gg, ]
aLR <- LR_rhythmicity(tt, yy)
aLR
gg <- 1
for(gg in 1:nrow(thisResult)){
if(gg %% 1000 == 0){
cat('processed', gg, 'genes\n')
}
yy <- BA11[gg, ]
aLR <- LR_rhythmicity(tt, yy)
thisResult$amp[gg] <- aLR$amp
thisResult$phase[gg] <- aLR$phase
thisResult$peakTime[gg] <- (6 - aLR$phase) %% 24
thisResult$basal[gg] <- aLR$offset
thisResult$R2[gg] <- ifelse(aLR$tss==0, 0, 1 - aLR$rss / aLR$tss)
thisResult$pvalue[gg] <- aLR$pvalue
}
gg <- 1
for(gg in 1:nrow(thisResult)){
if(gg %% 1000 == 0){
cat('processed', gg, 'genes\n')
}
yy <- BA11[gg, ]
aLR <- LR_rhythmicity(tt, yy)
thisResult$amp[gg] <- aLR$amp
thisResult$phase[gg] <- aLR$phase
thisResult$peakTime[gg] <- (6 - aLR$phase) %% 24
thisResult$basal[gg] <- aLR$offset
thisResult$pvalue[gg] <- aLR$pvalue
}
thisResult
tt <- pheno$tod
thisResult <- data.frame(genes = rownames(BA11),
amp =NA, phase = NA, peakTime = NA, basal = NA, pvalue = NA
)
gg <- 1
for(gg in 1:nrow(thisResult)){
if(gg %% 1000 == 0){
cat('processed', gg, 'genes\n')
}
yy <- BA11[gg, ]
aLR <- LR_rhythmicity(tt, yy)
thisResult$amp[gg] <- aLR$amp
thisResult$phase[gg] <- aLR$phase
thisResult$peakTime[gg] <- (6 - aLR$phase) %% 24
thisResult$basal[gg] <- aLR$offset
thisResult$pvalue[gg] <- aLR$pvalue
}
thisResult_sorted <- thisResult[order(thisResult$pvalue),]
head(thisResult_sorted)
tt_base <- seq(-6,18,0.1)
tt_base
i=1
this_LR <- thisResult[i]
this_LR <- thisResult_sorted[i]
this_LR
this_LR <- thisResult_sorted[i,]
i
this_LR <- thisResult_sorted[i,]
this_LR
yy_fit <- sinCurve(tt_base, this_LR$amp, this_LR$phase, this_LR$basal)
## for visualization purpose
sinCurve <- function(x, A, phase, basal){
A24 <- 24
A * sin(2*pi/A24 * (x + phase)) + basal
}
yy_fit <- sinCurve(tt_base, this_LR$amp, this_LR$phase, this_LR$basal)
yy_fit
this_LR
yy_obs <- BA11[this_LR$genes, ]
plot(tt, yy_obs)
atitle <- paste0(this_LR$genes, ". p = ", signif(this_LR$pvalue,2))
atitle
plot(tt, yy_obs ,pch=20,ylab="Expression Value",xlab = "Time of Death (TOD)",main = atitle)
atitle <- paste0("p = ", signif(this_LR$pvalue,2))
plot(tt, yy_obs ,pch=20,ylab=this_LR$genes, xlab = "Time of Death (TOD)",main = atitle)
topN <- 4
par(mfrow = c(2, 2))
for(i in 1:topN){
this_LR <- thisResult_sorted[i,]
yy_obs <- BA11[this_LR$genes, ]
yy_fit <- sinCurve(tt_base, this_LR$amp, this_LR$phase, this_LR$basal)
atitle <- paste0("p = ", signif(this_LR$pvalue,2))
plot(tt, yy_obs ,pch=20,ylab=this_LR$genes, xlab = "Time of Death (TOD)",main = atitle)
lines(tt_base, yy_fit, col = 2)
}
topN <- 4
par(mfrow = c(2, 2))
for(i in 1:topN){
this_LR <- thisResult_sorted[i,]
yy_obs <- BA11[this_LR$genes, ]
yy_fit <- sinCurve(tt_base, this_LR$amp, this_LR$phase, this_LR$basal)
atitle <- paste0("p = ", signif(this_LR$pvalue,3))
plot(tt, yy_obs ,pch=20,ylab=this_LR$genes, xlab = "Time of Death (TOD)",main = atitle)
lines(tt_base, yy_fit, col = 2, lwd =3)
}
topN <- 4
par(mfrow = c(2, 2))
for(i in 1:topN){
this_LR <- thisResult_sorted[i,]
yy_obs <- BA11[this_LR$genes, ]
yy_fit <- sinCurve(tt_base, this_LR$amp, this_LR$phase, this_LR$basal)
atitle <- paste0(this_LR$genes, ", p = ", signif(this_LR$pvalue,3))
plot(tt, yy_obs ,pch=20, xlab = "Time of Death (TOD)", ylab="", main = atitle)
lines(tt_base, yy_fit, col = 2, lwd =3)
}
topN <- 4
par(mfrow = c(2, 2))
for(i in 1:topN){
this_LR <- thisResult_sorted[i,]
yy_obs <- BA11[this_LR$genes, ]
yy_fit <- sinCurve(tt_base, this_LR$amp, this_LR$phase, this_LR$basal)
atitle <- paste0(this_LR$genes, ", p = ", signif(this_LR$pvalue,3))
plot(tt, yy_obs ,pch=20, xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
lines(tt_base, yy_fit, col = 2, lwd =3)
}
tt_base <- seq(-6,18,0.1)
topN <- 2
par(mfrow = c(3, 2))
for(i in 1:topN){
this_LR <- thisResult_sorted[i,]
yy_obs <- BA11[this_LR$genes, ]
yy_fit <- sinCurve(tt_base, this_LR$amp, this_LR$phase, this_LR$basal)
atitle <- paste0(this_LR$genes, ", p = ", signif(this_LR$pvalue,3))
plot(tt, yy_obs ,pch=20, xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
lines(tt_base, yy_fit, col = 2, lwd =3)
}
dev.off()
topN <- 6
par(mfrow = c(3, 2))
for(i in 1:topN){
this_LR <- thisResult_sorted[i,]
yy_obs <- BA11[this_LR$genes, ]
yy_fit <- sinCurve(tt_base, this_LR$amp, this_LR$phase, this_LR$basal)
atitle <- paste0(this_LR$genes, ", p = ", signif(this_LR$pvalue,3))
plot(tt, yy_obs ,pch=20, xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
lines(tt_base, yy_fit, col = 2, lwd =3)
}
library(diffCircadian) # include diffCircadian package
# load the data
data("BA11")
data("pheno")
stopifnot(colnames(BA11) == pheno$ID) ## to verify whether the sample ID in the gene expression and the phenotype data are the same
tt <- pheno$tod
thisResult <- data.frame(genes = rownames(BA11),
amp =NA, phase = NA, peakTime = NA, basal = NA, pvalue = NA, R2 = NA
)
gg <- 1
for(gg in 1:nrow(thisResult)){
if(gg %% 1000 == 0){
cat('processed', gg, 'genes\n')
}
yy <- BA11[gg, ]
aLR <- LR_rhythmicity(tt, yy)
thisResult$amp[gg] <- aLR$amp
thisResult$phase[gg] <- aLR$phase
thisResult$peakTime[gg] <- (6 - aLR$phase) %% 24
thisResult$basal[gg] <- aLR$offset
thisResult$pvalue[gg] <- aLR$pvalue
thisResult$R2[gg] <- aLR$R2
}
#> processed 1000 genes
#> processed 2000 genes
#> processed 3000 genes
#> processed 4000 genes
#> processed 5000 genes
result_rhythmicity <- thisResult[order(thisResult$pvalue),]
## for visualization purpose
sinCurve <- function(x, A, phase, basal){
A24 <- 24
A * sin(2*pi/A24 * (x + phase)) + basal
}
tt_base <- seq(-6,18,0.1)
topN <- 4
par(mfrow = c(2, 2))
for(i in 1:topN){
this_LR <- result_rhythmicity[i,]
yy_obs <- BA11[this_LR$genes, ]
yy_fit <- sinCurve(tt_base, this_LR$amp, this_LR$phase, this_LR$basal)
atitle <- paste0(this_LR$genes, ", p = ", signif(this_LR$pvalue,3))
plot(tt, yy_obs ,pch=20, xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
lines(tt_base, yy_fit, col = 2, lwd =3)
}
dev.off()
plot(tt, yy_obs ,pch=20, axes=F, xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
axis(side=1)
axis(side=2)
plot(tt, yy_obs ,pch=20, axes=F, xaxs = "i",yaxs="i", xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
plot(tt, yy_obs ,pch=20, axes=F, xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
axis(side=1, xpd=TRUE)
axis(side=2)
plot(tt, yy_obs ,pch=20, frame.plot = FALSE, xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
plot(tt, yy_obs ,pch=20, frame.plot = FALSE, xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
plot(tt, yy_obs ,pch=20,  xlab = "Time of Death (TOD)", ylab="Expression Value", main = atitle)
install.packages("powerSurvEpi")
library(powerSurvEpi)
powerSurvEpi
?powerSurvEpi
help(package = "powerSurvEpi")
install.packages("nSurvival")
install.packages("gsDesign")
library(gsDesign)
nSurvival
?nSurvival
ss <- nSurvival(
lambda1 = .2, lambda2 = .1, eta = .1, Ts = 2, Tr = .5,
sided = 1, alpha = .025
)
ss
ss <- nSurvival(
lambda1 = .2, lambda2 = .1, eta = .1, Ts = 2, Tr = 0,
sided = 1, alpha = .025
)
ss
ss <- nSurvival(
lambda1 = .2, lambda2 = .1, eta = .1, Ts = 2, Tr = 1,
sided = 1, alpha = .025
)
ss
ss <- nSurvival(
lambda1 = .2, lambda2 = .1, eta = .1, Ts = 2, Tr = 0.0001,
sided = 1, alpha = .025
)
ss
ss <- nSurvival(
lambda1 = .2, lambda2 = .1, eta = .1, Ts = 2, Tr = 1,
sided = 1, alpha = .025
)
ss
ss <- nSurvival(
lambda1 = .2, lambda2 = .1, eta = .1, Ts = 10, Tr = 1,
sided = 1, alpha = .025
)
ss
ss <- nSurvival(
lambda1 = .2, lambda2 = .1, eta = .1, Ts = 10, Tr = 0.1,
sided = 1, alpha = .025
)
ss
ss <- nSurvival(
lambda1 = .2, lambda2 = .1, eta = .1, Ts = 10, Tr = 0.001,
sided = 1, alpha = .025
)
ss
?nSurvival
library(devtools)
install_github("RRHO2/RRHO2", build_opts = c("--no-resave-data", "--no-manual"))
library(RRHO2)
set.seed(15213)
nGenes <- 2000
nDE <- 200
Genes <- paste0("Genes",1:nGenes)
## For up-regulated genes, the input score should be calculated using-log10(pvalue) * 1;
## For down-regulated genes, the input score should be calculated using-log10(pvalue) * (-1);
list1_pvalue_1_200 <- runif(nDE,0,0.05) ## up-regulated genes
list1_pvalue_201_400 <- runif(nDE,0,0.05) ## down-regulated genes
list1_pvalue_401_2000 <- runif(nGenes - 2 * nDE,0,1) ## non-changed genes
list1_DDE <- c(-log10(list1_pvalue_1_200),
-log10(list1_pvalue_201_400) * (-1),
-log10(list1_pvalue_401_2000) * sample(c(1,-1), length(list1_pvalue_401_2000), replace = TRUE))
gene_list1 <- data.frame(Genes=Genes,DDE = list1_DDE, stringsAsFactors = FALSE)
list2_pvalue_1_200 <- runif(nDE,0,0.05)
list2_pvalue_201_400 <- runif(nDE,0,0.05)
list2_pvalue_401_2000 <- runif(nGenes - 2 * nDE,0,1)
list2_DDE <- c(-log10(list2_pvalue_1_200), -log10(list2_pvalue_201_400) * (-1),
-log10(list2_pvalue_401_2000) * sample(c(1,-1), length(list2_pvalue_401_2000), replace = TRUE))
gene_list2 <- data.frame(Genes=Genes,DDE = list2_DDE, stringsAsFactors = FALSE)
RRHO_obj <-  RRHO2_initialize(gene_list1, gene_list2, labels = c("list1", "list2"), log10.ind=TRUE)
RRHO2_heatmap(RRHO_obj)
RRHO2_heatmap(RRHO_obj, colorGradient = gplots::bluered(101))
?RRHO2_heatmap
gplots::bluered(101)
RRHO2_heatmap
args(RRHO2_heatmap)
wilcox.test
?wilcox.test
wilcox.test(1:3,4:6)
wilcox.test(1:3,4:7)
wilcox.test(1:3,4:6,paired = T)
wilcox.test(1:4,4:8,paired = T)
wilcox.test(1:4,5:8,paired = T)
wilcox.test(1:4,5:8)
aname_GSE <- "GSE160521"
aGSE <- getGEO(aname_GSE,GSEMatrix=TRUE)
eData <- exprs(aGSE[[1]])
pData <- pData(phenoData(aGSE[[1]]))
library(GEOquery)
aname_GSE <- "GSE160521"
aGSE <- getGEO(aname_GSE,GSEMatrix=TRUE)
eData <- exprs(aGSE[[1]])
head(eData)
eData
pData <- pData(phenoData(aGSE[[1]]))
pData
pData$"tissue:ch1"
dim(pData)
library(GEOquery)
aname_GSE <- "GSE121265"
aGSE <- getGEO(aname_GSE,GSEMatrix=TRUE)
pData <- pData(phenoData(aGSE[[1]]))
dim(pData)
head(pData)
pData$"well:ch1"
table(pData$"well:ch1")
initech = read.csv("data/initech.csv")
initech = read.csv("https://github.com/daviddalpiaz/appliedstats/blob/master/data/initech.csv")
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
initech
]
head(initech)
initech <- read.csv("https://raw.githubusercontent.com/daviddalpiaz/appliedstats/master/data/initech.csv")
initech <- read.csv("~/Desktop/appliedstats/data/initech.csv")
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
initech_fit = lm(salary ~ years, data = initech)
summary(initech_fit)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit, col = "darkorange", lwd = 2)
par(mfrow = c(1, 2))
plot(fitted(initech_fit), resid(initech_fit), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit), col = "dodgerblue", lwd = 2)
library(MASS)
library(faraway)
install.packages("faraway")
library(faraway)
savings_model = lm(sr ~ ., data = savings)
savings
head(savings)
boxcox(savings_model, plotit = TRUE)
dev.off()
boxcox(savings_model, plotit = TRUE)
boxcox(savings_model, plotit = TRUE, lambda = seq(0.5, 1.5, by = 0.1))
plot(fitted(savings_model), resid(savings_model), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
gala_model = lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data = gala)
plot(fitted(gala_model), resid(gala_model), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
boxcox(gala_model, lambda = seq(-0.25, 0.75, by = 0.05), plotit = TRUE)
yy <- boxcox(savings_model, plotit = TRUE, lambda = seq(0.5, 1.5, by = 0.1))
tt
yy
yy <- boxcox(savings_model, plotit = TRUE)
tt
yy
yy$x[which.max(yy$y)]
yy <- boxcox(gala_model, lambda = seq(-0.25, 0.75, by = 0.05), plotit = TRUE)
yy$x[which.max(yy$y)]
gala_model_cox = lm((((Species ^ 0.3) - 1) / 0.3) ~ Area + Elevation + Nearest + Scruz + Adjacent, data = gala)
plot(fitted(gala_model_cox), resid(gala_model_cox), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
shapiro.test(residuals(gala_model))
shapiro.test(residuals(gala_model_cox))
boxcox
?boxcox
n <- 50
Amp <- 0
Sigma <- 1
basal <- 20
set.seed(32608)
tt <- runif(n,0,24)
yy <- A*sin(p*pi/period * tt) + basal + rt(n,3)
n <- 50
Amp <- 0
Sigma <- 1
basal <- 20
set.seed(32608)
tt <- runif(n,0,24)
yy <- Amp*sin(2*pi/period * tt) + basal + rt(n,3)
n <- 50
Amp <- 0
Sigma <- 1
basal <- 20
period <- 24
set.seed(32608)
tt <- runif(n,0,24)
yy <- Amp*sin(2*pi/period * tt) + basal + rt(n,3)
yy
asin <- sin(2*pi/period * tt)
acos <- cos(2*pi/period * tt)
afit <- lm(tt~asin+acos)
resid(afit)
qqnorm(resid(afit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(afit), col = "dodgerblue", lwd = 2)
aboxcox <- boxcox(afit)
afit <- lm(tt~asin+acos, data = adata)
qqnorm(resid(afit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(afit), col = "dodgerblue", lwd = 2)
asin <- sin(2*pi/period * tt)
acos <- cos(2*pi/period * tt)
adata <- data.frame(yy=yy,asin=asin, acos=acos)
afit <- lm(tt~asin+acos, data = adata)
aboxcox <- boxcox(afit)
aboxcox <- boxcox(afit)
lam1 <- aboxcox$x[which.max(aboxcox$y)]
byy <- (yy^lam1 - 1) / lam1
byy
afit <- lm(yy~asin+acos, data = adata)
qqnorm(resid(afit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(afit), col = "dodgerblue", lwd = 2)
aboxcox <- boxcox(afit)
lam1 <- aboxcox$x[which.max(aboxcox$y)]
byy <- (yy^lam1 - 1) / lam1
aboxcox <- boxcox(afit,seq(-10,10,0.1))
lam1 <- aboxcox$x[which.max(aboxcox$y)]
byy <- (yy^lam1 - 1) / lam1
bdata <- data.frame(yy=byy,asin=asin, acos=acos)
bfit <- lm(yy~asin+acos, data = adata)
qqnorm(resid(bfit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(bfit), col = "dodgerblue", lwd = 2)
bfit <- lm(yy~asin+acos, data = bdata)
qqnorm(resid(bfit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(bfit), col = "dodgerblue", lwd = 2)
shapiro.test()
shapiro.test(resid(bfit))
shapiro.test(resid(afit))
resid
?resid
10^(-7.5)
10^(-2.8)
seq <- seq(0,2*pi,length.out = 12)
seq
seq <- seq(0,2*pi,length.out = 13)
seq
sin(seq)*2
sin(seq)^2
library(differentialR2)
boots_deltaR2
?boots_deltaR2
set.seed(32608)
n <- 50
tt1 <- runif(n,0,24)
Amp1 <- 2
Phase1 <- 6
Offset1 <- 3
yy1 <- Amp1 * sin(2*pi/24 * (tt1 + Phase1)) + Offset1 + rnorm(n,0,1)
tt2 <- runif(n,0,24)
Amp2 <- 3
Phase2 <- 5
Offset2 <- 2
yy2 <- Amp2 * sin(2*pi/24 * (tt2 + Phase2)) + Offset2 + rnorm(n,0,1)
boots_deltaR2(tt1, yy1, tt2, yy2)
?LR_deltaR2
set.seed(32608)
n <- 50
tt1 <- runif(n,0,24)
Amp1 <- 2
Phase1 <- 6
Offset1 <- 3
yy1 <- Amp1 * sin(2*pi/24 * (tt1 + Phase1)) + Offset1 + rnorm(n,0,1)
tt2 <- runif(n,0,24)
Amp2 <- 3
Phase2 <- 5
Offset2 <- 2
yy2 <- Amp2 * sin(2*pi/24 * (tt2 + Phase2)) + Offset2 + rnorm(n,0,1)
LR_deltaR2(tt1, yy1, tt2, yy2)
rm(list=ls())
library(devtools)
library(usethis)
setwd("~/Desktop/differentialR2")
document()
install()
rm(list=ls())
library(devtools)
library(usethis)
setwd("~/Desktop/differentialR2")
document()
install()
library(nloptr)
rm(list=ls())
library(devtools)
library(usethis)
setwd("~/Desktop/differentialR2")
document()
install()
rm(list=ls())
library(devtools)
library(usethis)
setwd("~/Desktop/differentialR2")
document()
install()
nloptr
rm(list=ls())
library(devtools)
library(usethis)
setwd("~/Desktop/differentialR2")
document()
install()
nloptr
?nloptr
LR_deltaR2
?LR_deltaR2
